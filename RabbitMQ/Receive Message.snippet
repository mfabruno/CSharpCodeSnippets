<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Title>Receive Clients</Title>
      <Author>Portilha</Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>
      </Shortcut>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal Editable="true">
          <ID>queueName</ID>
          <ToolTip>queueName</ToolTip>
          <Default>queueName</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$" Kind="method body"><![CDATA[ var factory = new ConnectionFactory() {
                HostName = "localhost"
};

using (var connection = factory.CreateConnection())
{
    using (var channel = connection.CreateModel())
    {
        channel.QueueDeclare(queue: $queueName$,
                             durable: false,
                             exclusive: false,
                             autoDelete: false,
                             arguments: null);

        channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);

        Trace.WriteLine(" [*] Waiting for messages.");

        var consumer = new EventingBasicConsumer(channel);
        consumer.Received += (model, ea) =>
        {
            var body = ea.Body;

            // Read the Message .. 
            var message = Encoding.UTF8.GetString(body);
            Trace.WriteLine(" [x] Received {0}", message);

            // Custom Logic
            int dots = message.Split('.').Length - 1;
            Thread.Sleep(dots * 1000);

            Trace.WriteLine(" [x] Done");

            channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple: false);
        };

        channel.BasicConsume(queue: "hello",
                             autoAck: false,
                             consumer: consumer);

        Trace.WriteLine(" Press [enter] to exit.");
        
    }
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>