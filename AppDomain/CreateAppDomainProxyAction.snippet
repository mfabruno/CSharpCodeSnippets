<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Create a Proxy to make an Action in another AppDomain</Title>
      <Author>Efacec</Author>
      <Description>
      </Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>
      </Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>ProxyName</ID>
          <ToolTip>ProxyName</ToolTip>
          <Default>ProxyName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>result</ID>
          <ToolTip>result</ToolTip>
          <Default>result</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>methodName</ID>
          <ToolTip>methodName</ToolTip>
          <Default>methodName</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>args</ID>
          <ToolTip>args</ToolTip>
          <Default>args</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[public class $ProxyName$Action : IDisposable
{
    AppDomain domain = null;
    $ProxyName$InstanceProxy proxy = null;
    /// <summary>
    /// Initializes a new instance of the <see cref="T:$ProxyName$Action"/> class.
    /// </summary>
    public $ProxyName$Action()
    {
        domain = AppDomain.CreateDomain("$ProxyName$Domain", null, AppDomain.CurrentDomain.SetupInformation);

        proxy = domain.CreateInstanceAndUnwrap(Assembly.GetAssembly(
            typeof($ProxyName$InstanceProxy)).FullName, typeof($ProxyName$InstanceProxy).ToString()) as $ProxyName$InstanceProxy;

        // string windir = Environment.GetEnvironmentVariable("windir");
        // proxy.LoadAssembly(windir + @"\Microsoft.NET\Framework\v4.0.30319\Microsoft.JScript.dll");
    }

    public $result$ $methodName$($args$)
    {
        return proxy.$methodName$($args$);
    }

    public void Dispose()
    {
        if (domain != null)
        {
            AppDomain.Unload(domain);
            domain = null;
        }
    }
}

internal class $ProxyName$InstanceProxy : MarshalByRefObject
{
    // Loads a given assembly in the AppDomain
    public void LoadAssembly(string path)
    {
        Assembly asm = Assembly.LoadFrom(path);
    }

    public $result$ $methodName$($args$)
    {
        $end$      
    }

    /// <summary>
    /// Obtains a lifetime service object to control the lifetime policy for this instance.
    /// </summary>
    /// <returns>
    /// An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> property.
    /// </returns>
    /// <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. </exception>
    /// <PermissionSet>
    /// 	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/>
    /// </PermissionSet>
    public override object InitializeLifetimeService()
    {
        return null;
    }
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>